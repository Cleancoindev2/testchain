#!/usr/bin/env bash

function jq_inplace {
  TMP=$(mktemp)
  jq "$1" "$2" > $TMP && mv $TMP "$2"
}

function sed_inplace {
  # sed's -i argument behaves differently on macOS, hence this hack
  sed -i.bak "$1" $2 && rm $2.bak
}

function deploy_mcd_tdds {
  TDDS=$LIB/testchain-dss-deployment-scripts
  cd $TDDS

  export MCD_PAUSE_DELAY=0

  # change price feeds to DSValue so we can set prices from within tests
  TMP=$(mktemp)
  jq_inplace '.tokens[].pip.type = "value"' step-1.json

  # change step-1-deploy not to send 10000 ETH
  sed_inplace 's/10000 eth/1 eth/' step-1-deploy

  # step 1 only
  source ./step-1-deploy

  # set MCD_ADM back to ETH_FROM
  seth send "$MCD_ADM" 'vote(address[] memory)' ["${ETH_FROM#0x}"]
  seth send "$MCD_ADM" 'lift(address)' "$ETH_FROM"

  # step 4
  # jq_inplace '.tokens[].pip.type = "value"' step-4.json
  # jq_inplace '.tokens.ETH.pip.price = "123.45"' step-4.json
  # jq_inplace '.tokens.COL1.pip.price = "234.56"' step-4.json
  # ./step-4-deploy

  # uncomment below to add more ilks
  # DPA=$LIB/testchain-dss-deployment-scripts/contracts/dss-proxy-actions
  # cd $DPA/lib/dss-cdp-manager/lib/dss-deploy/
  # export DAPP_SOLC_VERSION=0.5.0
  # . bin/deploy-ilk-col1 B
  # . bin/deploy-ilk-eth B

  ls \
    $TDDS/out/abi/* \
    $TDDS/contracts/dss-deploy/out/*.abi | \
    grep -v -E "(Fab|Dev|Test|Like|t_sol|lib_|src_)" | \
    xargs sh -c "cp \$@ $OUT/mcd" placeholder
  # why the placeholder? see https://en.wikipedia.org/wiki/Xargs#Shell_trick

  # sort addresses alphabetically
  jq -S . $TDDS/out/addresses.json > $OUT/addresses-mcd.json

  # all done, go home!
  cd -
}
